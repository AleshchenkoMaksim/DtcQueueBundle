{% extends "DtcQueueBundle::layout.html.twig" %}
{% block title %}DtcQueue - Admin - Trends{% endblock %}
{% block headcontent %}
    <style type="text/css">
        .view label {
            font-weight: normal;
            margin-right: 5px;
        }
        .view #type-spin {
            font-size: 5px;
        }

        #range-container, #range-value-container {
            display: none;
        }

        #range-value-container {
            text-align: center;
        }


        .range input[type=range] {
            width: 100%;
        }
    </style>
{% endblock %}

{% block content %}
    {% if not record_timings %}
        <h2>Timings Not Recorded</h2>
        <p>
            Job timings are not being recorded.
        </p>
        <p>
            The following configuration entry needs to be enabled in config.yml:
        </p>
<pre>
dtc_queue:
    # ...
    record_timings: true
</pre>
    {% else %}
        <script src="{{ chartjs }}"></script>
        <div class="view">
            <label for="type">View</label>
            <select id="type">
                <option value="YEAR">By Year</option>
                <option value="MONTH">By Month</option>
                <option value="DAY">By Day</option>
                <option value="HOUR" selected>By Hour</option>
                <option value="MINUTE">By Minute</option>
            </select> <span id="type-spin"><i class="fa fa-cog fa-spin fa-3x fa-fw"></i>
            <span class="sr-only">Loading...</span></span>
        </div>
        <div>
            <canvas id="trends"></canvas>
        </div>
        <div id="range-container">
            <label for="date-adjuster">Range: </label> <input id="date-adjuster" type="range" max="23" value="23" min="0" />
        </div>
        <div id="range-value-container">
            <span id="date-adjuster-value"></span>
        </div>
        <script>
            var ranges = {
                YEAR: {
                    max: 9
                },
                MONTH: {
                    max: 11
                },
                DAY: {
                    max: 31,
                    increment: 86400
                },
                HOUR: {
                    max: 23,
                    increment: 3600
                },
                MINUTE: {
                    max: 59,
                    increment: 60
                }
            };

            var states = {{ states | json_encode | raw }};
            var selectElement = document.getElementById('type');
            var spinElement = document.getElementById('type-spin');
            var rangeElement = document.getElementById('date-adjuster');
            var rangeValueElement = document.getElementById('date-adjuster-value');
            var rangeMaxDate;
            var prevIdx;

            selectElement.onchange=selectChange;
            rangeElement.onchange=rangeChange;

            selectChange();

            function selectChange() {
              var idx = selectElement.selectedIndex;
              if (prevIdx === idx) {
                return;
              }
              var value = getSelectedValue();
              if (value) {
                spinElement.style.visibility = 'visible';
                rangeMaxDate = new Date();
                rangeValueElement.innerText = rangeMaxDate.toLocaleString();
                var newRangeMax = ranges[value].max;
                rangeElement.max = newRangeMax;
                rangeElement.value = newRangeMax;
                fetchData(value, rangeMaxDate.toISOString());
              }
            }


            function getSelectedValue() {
              var idx = selectElement.selectedIndex;
              var options = selectElement.getElementsByTagName('OPTION');
              if (idx >= 0) {
                var selectedOption = options[idx];
                return selectedOption.value;
              }
            }

            function rangeChange() {
              var newEnd = calculateRangeLabel();
              var value = getSelectedValue();
              fetchData(value, newEnd.toISOString());
            }

            function calculateRangeLabel() {
              var selectedValue = getSelectedValue();
              var increment = ranges[selectedValue].increment;
              var rangeValue = rangeElement.value;
              var finalDate = new Date();
              finalDate.setTime(rangeMaxDate.getTime());
              var rangeValueInt = parseInt(rangeValue);

              for (var i = parseInt(rangeElement.max); i > rangeValueInt; i--) {
                if (increment) {
                  finalDate.setTime(finalDate.getTime() - (increment * 1000));
                }
                else {
                  if (selectedValue === 'MONTH') {
                    finalDate.setMonth(finalDate.getMonth() - 1);
                  }
                  if (selectedValue === 'YEAR') {
                    finalDate.setYear(finalDate.getFullYear() - 1);
                  }
                }
              }
              rangeValueElement.innerText = finalDate.toLocaleString();
              return finalDate;
            }

            function fetchData(type, end) {
              fetch('{{ path('dtc_queue_timings') }}?type=' + type + '&end=' + end, { credentials: 'include' }).then(function(response) {
                if (response.status === 200) {
                  response.json().then(function (data) {
                    if (getSelectedValue() === type) {
                      renderTrends(type, data);
                      spinElement.style.visibility = 'hidden';
                    }
                  });
                }
              });
            }

            function convertDates(type, dateList) {
              var newDates = [];
              for (var i = 0, len = dateList.length; i < len; i++) {
                var parsedDate = Date.parse(dateList[i]);
                if (typeof(parsedDate) === 'number') {
                  var realDate = new Date(parsedDate);
                  switch(type) {
                    case 'YEAR':
                      newDates.push(realDate.getFullYear());
                      break;
                    case'MONTH':
                      newDates.push(realDate.getFullYear() + '-' + (realDate.getMonth() + 1));
                      break;
                    case 'DAY':
                      newDates.push(realDate.getFullYear() + '-' + (realDate.getMonth() + 1) + '-' + realDate.getDate());
                      break;
                    case 'HOUR':
                      newDates.push(realDate.getFullYear() + '-' + (realDate.getMonth() + 1) + '-' + realDate.getDate() + ' ' + realDate.getHours());
                      break;
                  }
                }
              }
              return newDates;
            }

            function renderTrends(type, data) {
                document.getElementById('range-value-container').style.display='block';
                document.getElementById('range-container').style.display='block';
                var label = type.toString().toLowerCase();
                var dates = convertDates(type, data['timings_dates_rfc3339']);
                var datasets = [];
                var curLabel;
                var curColor;
                var timingsData;
                for (var state in states) {
                    if (states.hasOwnProperty(state)) {
                        curLabel = states[state].label;
                        curColor = states[state].color;
                        timingsData = data['timings_data_' + state];
                        datasets.push(
                            {
                                label: curLabel,
                                backgroundColor: curColor,
                                borderColor: curColor,
                                data: timingsData,
                                fill: false
                            }
                        );
                    }
                }
                var red = 'rgb(255, 99, 132)';
                var canvasEle = document.getElementById('trends');
                var chart = new Chart(canvasEle, {
                    type: 'line',
                    data: {
                      labels: dates,
                      datasets: datasets
                    },
                options: {
                  responsive: true,
                  title: {
                    display: true,
                    text: 'Job Timings'
                  },
                  tooltips: {
                    mode: 'index',
                    intersect: true
                  },
                  scales: {
                    xAxes: [
                      {
                        display: true,
                        scaleLabel: {
                          display: true,
                          labelString: label
                        }
                      }
                    ],
                    yAxes: [{
                      ticks: {
                        beginAtZero: true
                      },
                      display: true,
                      scaleLabel: {
                        display: true,
                        labelString: 'Count'
                      }
                    }]
                  }
                }
              });
            }
        </script>
    {% endif %}
{% endblock %}
