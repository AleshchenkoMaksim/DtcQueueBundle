{% extends "DtcGridBundle:Page:datatables.html.twig" %}
{% block title %}DtcQueue - Admin - Live Jobs{% endblock %}
{% block grid %}
    {% include 'DtcQueueBundle:Queue:nav.html.twig' %}

    <h3>Live Jobs</h3>
    {{ dtc_grid.render | raw }}
    <div class="archive-jobs form-group form-inline">
        <label for="workerName">WorkerName: </label>
        <select id="workerName" class="form-control" name="workerName">
            <option value="">Any</option>
            {% for workerName, method in worker_methods %}
                <option value="{{ workerName }}">{{ workerName }}</option>
            {% endfor %}
        </select>
        <label for="method">Method: </label>
        <select id="method" class="form-control" name="method">
            <option value="">Any</option>
        </select>
        <button id="jobs-archive" class="btn btn-primary"><i class="fa fa-circle-o-notch fa-spin hidden"></i> Archive</button> <progress style="display: none" id="jobs-archive-progress"></progress>
    </div>
    <script>
        var fetchPath = '{{ path('dtc_queue_archive') }}';
        var workerMethods = {{ worker_methods|json_encode|raw }};
        var workerNameElement = document.getElementById('workerName');
        var methodElement = document.getElementById('method');
        var originalMethodHtml = methodElement.innerHTML;
        var archiveButton = document.getElementById('jobs-archive');
        var progressElement = document.getElementById('jobs-archive-progress');

        archiveButton.addEventListener('click', promptArchive);
        workerNameElement.addEventListener('change', workerNameChange);
        function workerNameChange() {
          var workerName = getSelected(workerNameElement);
          if (workerName) {
            methodElement.innerHTML = generateOptions(workerMethods[workerName]);
            return;
          }
          methodElement.innerHTML = originalMethodHtml;
        }

        function getSelected(element) {
          var idx = element.selectedIndex;
          if (idx > 0) {
            var options = element.getElementsByTagName('option');
            var optionElement = options[idx];
            if (optionElement) {
              return optionElement.value;
            }
          }
          return null
        }

        function generateOptions(list) {
          var optionHtml = '<option value="">Any</option>';
          for (var i = 0, len = list.length; i < len; i++) {
            var method = list[i];
            optionHtml += '<option value"' + method + '">' + method + '</option>';
          }
          return optionHtml;
        }

        function promptArchive() {
          var workerName = getSelected(workerNameElement);
          var method = getSelected(methodElement);
          var message = "Are you sure?\n\nThis will archive all non-running jobs";
          if (workerName) {
            message += " of worker '" + workerName + "'";
          }
          if (method) {
            message += ", method '" + method + "'";
          }
          message += ".";
          if (confirm(message)) {
            archiveJobs();
          }
        }

        function archiveJobs() {
          var workerName = getSelected(workerNameElement);
          var method = getSelected(methodElement);
          var formData = new FormData;
          var spinner = archiveButton.getElementsByTagName('i');
          spinner[0].classList.remove('hidden');

          // disable all the buttons
          var buttons = document.getElementsByTagName('button');
          for (var i = 0, len = buttons.length; i < len; i++) {
            buttons[i].disabled = true;
          }

          var pagination = document.getElementsByClassName('dataTables_paginate');
          pagination[0].style.visibility = 'hidden';

          if (workerName) {
            formData.append('workerName', workerName);
          }
          if (method) {
            formData.append('method', method);
          }

          progressElement.max = "1";
          progressElement.value = "0";
          progressElement.style.display = 'inline';

          fetch(fetchPath, {
            credentials: 'include',
            method: 'post',
            body: formData
          }).then(function (response) {
            processResponse(response.body.getReader());
          });


          function processResponse(reader) {
            reader.read().then(function processResult (result) {
              if (result.done) {
                window.location.reload();
                return;
              }
              var progress = (new TextDecoder('utf-8')).decode(result.value);
              var lines = progress.split(/\n/);

              for (var i = 0, len = lines.length; i < len; i++) {
                if (lines[i]) {
                  var json = JSON.parse(lines[i]);
                  if (json) {
                    if (json.total !== undefined) {
                      if (json.total === 0) {
                        progressElement.value = "1";
                      }
                      else {
                        progressElement.max = json.total.toString();
                      }
                    }
                    else if (json.count) {
                      progressElement.value = json.count.toString();
                    }
                  }
                }
              }
              processResponse(reader);
            });
          }
        }
    </script>

{% endblock %}
